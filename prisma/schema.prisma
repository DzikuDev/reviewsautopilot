generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String       @id @default(cuid())
  email            String       @unique
  name             String?
  image            String?
  createdAt        DateTime     @default(now())
  accounts         Account[]
  auditLogs        AuditLog[]   @relation("AuditLogActor")
  draftReplies     DraftReply[] @relation("DraftReplyCreatedBy")
  memberships      Membership[]
  publishedReplies Reply[]      @relation("ReplyPublishedBy")
  sessions         Session[]
  templates        Template[]   @relation("TemplateCreatedBy")
  toneProfiles     ToneProfile[] @relation("ToneProfileCreatedBy")
}

model Org {
  id           String             @id @default(cuid())
  name         String
  createdAt    DateTime           @default(now())
  apiKeys      ApiKey[]
  auditLogs    AuditLog[]
  rules        EscalationRule[]
  integrations Integration[]
  locations    Location[]
  memberships  Membership[]
  campaigns    OutreachCampaign[]
  subs         Subscription?
  templates    Template[]
  toneProfiles ToneProfile[]
}

model Membership {
  id     String @id @default(cuid())
  role   Role
  userId String
  orgId  String
  org    Org    @relation(fields: [orgId], references: [id])
  user   User   @relation(fields: [userId], references: [id])

  @@unique([userId, orgId])
}

model Location {
  id               String        @id @default(cuid())
  orgId            String
  name             String
  address          String?
  phone            String?
  timezone         String        @default("Europe/London")
  googleLocationId String?
  facebookPageId   String?
  createdAt        DateTime      @default(now())
  integrations     Integration[]
  org              Org           @relation(fields: [orgId], references: [id])
  reviews          Review[]
}

model Integration {
  id           String    @id @default(cuid())
  orgId        String
  locationId   String?
  provider     Provider
  accessToken  String
  refreshToken String?
  expiresAt    DateTime?
  scopes       String[]
  meta         Json?
  createdAt    DateTime  @default(now())
  location     Location? @relation(fields: [locationId], references: [id])
  org          Org       @relation(fields: [orgId], references: [id])
}

model Review {
  id             String       @id @default(cuid())
  provider       Provider
  externalId     String
  locationId     String
  rating         Int
  title          String?
  text           String
  languageCode   String?
  authorName     String?
  authorUrl      String?
  publishedAt    DateTime
  updatedAt      DateTime
  hasOwnerReply  Boolean      @default(false)
  ownerReplyAt   DateTime?
  ownerReplyText String?
  labels         String[]
  drafts         DraftReply[]
  replies        Reply[]
  location       Location     @relation(fields: [locationId], references: [id])

  @@unique([provider, externalId])
}

model DraftReply {
  id            String      @id @default(cuid())
  reviewId      String
  status        DraftStatus @default(DRAFT)
  content       String
  toneProfileId String?
  createdById   String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @default(now())
  violations    Json?
  createdBy     User?       @relation("DraftReplyCreatedBy", fields: [createdById], references: [id])
  review        Review      @relation(fields: [reviewId], references: [id])
}

model Reply {
  id              String    @id @default(cuid())
  reviewId        String
  content         String
  publishedAt     DateTime?
  providerReplyId String?
  publishedById   String?
  publishedBy     User?     @relation("ReplyPublishedBy", fields: [publishedById], references: [id])
  review          Review    @relation(fields: [reviewId], references: [id])
}

model Template {
  id          String    @id @default(cuid())
  orgId       String
  name        String
  description String?
  content     String
  minStars    Int?
  maxStars    Int?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  createdById String?
  org         Org       @relation(fields: [orgId], references: [id])
  createdBy   User?     @relation("TemplateCreatedBy", fields: [createdById], references: [id])
}

model ToneProfile {
  id              String    @id @default(cuid())
  orgId           String
  name            String
  description     String?
  settings        Json
  isActive        Boolean   @default(true)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  createdById     String?
  bannedPhrases   String[]
  requiredPhrases String[]
  org             Org       @relation(fields: [orgId], references: [id])
  createdBy       User?     @relation("ToneProfileCreatedBy", fields: [createdById], references: [id])
}

model EscalationRule {
  id           String   @id @default(cuid())
  orgId        String
  name         String
  maxStars     Int?
  keywords     String[]
  holdPublish  Boolean  @default(true)
  notifyEmails String[]
  org          Org      @relation(fields: [orgId], references: [id])
}

model OutreachCampaign {
  id       String        @id @default(cuid())
  orgId    String
  name     String
  channel  String
  message  String
  schedule String?
  active   Boolean       @default(false)
  org      Org           @relation(fields: [orgId], references: [id])
  logs     OutreachLog[]
}

model OutreachLog {
  id         String           @id @default(cuid())
  campaignId String
  contact    String
  status     String
  createdAt  DateTime         @default(now())
  campaign   OutreachCampaign @relation(fields: [campaignId], references: [id])
}

model Job {
  id        String   @id @default(cuid())
  type      String
  payload   Json
  runAt     DateTime @default(now())
  attempts  Int      @default(0)
  status    String   @default("queued")
  lastError String?
  createdAt DateTime @default(now())
}

model AuditLog {
  id        String   @id @default(cuid())
  orgId     String
  actorId   String?
  action    String
  target    String?
  meta      Json?
  createdAt DateTime @default(now())
  actor     User?    @relation("AuditLogActor", fields: [actorId], references: [id])
  org       Org      @relation(fields: [orgId], references: [id])
}

model Subscription {
  id               String   @id @default(cuid())
  orgId            String   @unique
  plan             String
  status           String
  stripeCustomerId String?
  stripeSubId      String?
  createdAt        DateTime @default(now())
  org              Org      @relation(fields: [orgId], references: [id])
}

model ApiKey {
  id        String   @id @default(cuid())
  orgId     String
  name      String
  secret    String   @unique
  createdAt DateTime @default(now())
  org       Org      @relation(fields: [orgId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

enum Provider {
  GOOGLE
  FACEBOOK
}

enum DraftStatus {
  DRAFT
  APPROVED
  REJECTED
  PUBLISHED
  NEEDS_REVIEW
}

enum Role {
  OWNER
  ADMIN
  MEMBER
}
